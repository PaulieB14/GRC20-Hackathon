#!/bin/bash

# This script is a workaround since we're having issues with the TypeScript types
# It will directly use the Ipfs.publishEdit API to add property addresses to entities

# Read the environment variables
source .env

# Create a temporary JSON file with the operations
cat > temp-property-addresses-ops.json << EOL
{
  "name": "Add Property Addresses to GRC20 Deed Entities",
  "ops": [
    {
      "path": ["property"],
      "value": {
        "name": "Property Address",
        "type": "TEXT"
      }
    }
  ],
  "author": "${WALLET_ADDRESS}"
}
EOL

echo "Created temporary operations file"

# Create a Node.js script to publish the edit
cat > publish-property-addresses.js << EOL
import { Ipfs } from '@graphprotocol/grc-20';
import { createPublicClient, createWalletClient, http, parseGwei } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import fs from 'fs';
import dotenv from 'dotenv';

dotenv.config();

const grc20Testnet = {
  id: 19411,
  name: 'Geogenesis Testnet',
  network: 'geogenesis-testnet',
  nativeCurrency: {
    decimals: 18,
    name: 'ETH',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: { http: ['https://rpc-geo-test-zc16z3tcvf.t.conduit.xyz/'] },
    public: { http: ['https://rpc-geo-test-zc16z3tcvf.t.conduit.xyz/'] },
  }
};

// Map of instrument numbers to property addresses
const propertyAddresses = {
  '2025035356': '3461 10TH AVE N, ST PETERSBURG, FL 33713',
  '2025035363': '4715 BAY ST NE APT 123, SAINT PETERSBURG, FL 33703',
  '2025035367': '755 119TH AVE, TREASURE ISLAND, FL 33706',
  '2025035368': '125 DOLPHIN DR S, OLDSMAR, FL 34677',
  '2025035369': '18500 GULF BOULEVARD, UNIT 108, INDIAN SHORES, FL 33785',
  '2025035383': '2326 MELROSE AVE S, ST. PETERSBURG, FL 33712',
  '2025035390': '2818 55TH ST N, ST PETERSBURG, FL 33710',
  '2025035391': '5136 52ND LN N, ST PETERSBURG, FL 33710',
  '2025035398': '1900 59TH AVE N # 216, ST PETERSBURG, FL 33714'
};

// Map of entity IDs to instrument numbers
const entityMap = {
  '7tzYRxS8QES1fQQLoUpc8U': '2025035356',
  'PbuL6TM19rdkFoEh31VyQq': '2025035363',
  'GXSWc9tEJp5iP1idJDyuYC': '2025035367',
  'QQ2Cb5L4yNTUfva7aEXYdk': '2025035368',
  'JUtVFrszpHccyEQPkURtUj': '2025035369',
  'JSvDqnQxpXqdVYDm3G9Zyy': '2025035383',
  'YB7z9V1fXtBv1LU5kpY2i8': '2025035390',
  '4a2Y9zUyeknUBCu8afhyds': '2025035391',
  '8b6w38q92qaxvbvgrvJPNh': '2025035398'
};

async function addPropertyAddresses() {
  try {
    // Read the operations from the temporary file
    const editData = JSON.parse(fs.readFileSync('temp-property-addresses-ops.json', 'utf-8'));
    
    // Read entity data from grc20-deeds-triples.json
    const grc20DeedsTriples = JSON.parse(fs.readFileSync('data/grc20-deeds-triples.json', 'utf-8'));
    
    console.log(\`Read \${grc20DeedsTriples.length} entities from grc20-deeds-triples.json\`);
    
    // Get the property ID from the first operation
    const propertyAddressId = "propertyAddressId"; // This will be generated by the system
    
    // Find the deed type ID from the first entity
    const deedTypeTriple = grc20DeedsTriples[0].triples.find(
      (triple) => triple.attributeId && triple.attributeId.includes('type')
    );
    
    const deedTypeId = deedTypeTriple ? deedTypeTriple.value : null;
    
    if (deedTypeId) {
      // Add property address to deed type
      console.log('Adding property address to deed type...');
      editData.ops.push({
        path: ['type', deedTypeId, 'properties'],
        value: propertyAddressId,
        op: 'add'
      });
    }
    
    // Add property address to each entity
    console.log('Adding property addresses to entities...');
    for (const entity of grc20DeedsTriples) {
      const entityId = entity.entityId;
      const instrumentNumber = entityMap[entityId];
      
      if (instrumentNumber && propertyAddresses[instrumentNumber]) {
        // Add property address to entity
        editData.ops.push({
          path: ['entity', entityId, 'properties', propertyAddressId],
          value: {
            type: 'TEXT',
            value: propertyAddresses[instrumentNumber]
          }
        });
        
        console.log(\`Added property address "\${propertyAddresses[instrumentNumber]}" to entity \${entityId}\`);
      }
    }
    
    console.log(\`Generated \${editData.ops.length} operations to add property addresses\`);
    
    // Save the updated operations back to the file
    fs.writeFileSync('temp-property-addresses-ops.json', JSON.stringify(editData, null, 2));
    
    // Publish to IPFS
    console.log('Publishing to IPFS...');
    const cid = await Ipfs.publishEdit(editData);
    console.log(\`Published to IPFS with CID: \${cid}\`);
    
    // Get calldata
    console.log('Getting calldata...');
    const spaceId = process.env.SPACE_ID;
    const result = await fetch(\`https://api-testnet.grc-20.thegraph.com/space/\${spaceId}/edit/calldata\`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({ 
        cid,
        network: "TESTNET"
      }),
    });
    
    if (!result.ok) {
      throw new Error(\`Failed to get calldata: \${result.statusText}\`);
    }
    
    const { to, data } = await result.json();
    console.log(\`Got calldata: to=\${to}, data length=\${data.length}\`);
    
    // Submit transaction
    console.log('Submitting transaction...');
    const account = privateKeyToAccount(process.env.PRIVATE_KEY);
    
    const publicClient = createPublicClient({
      chain: grc20Testnet,
      transport: http()
    });
    
    const walletClient = createWalletClient({
      account,
      chain: grc20Testnet,
      transport: http()
    });
    
    // Get nonce
    console.log('Getting nonce...');
    const nonce = await publicClient.getTransactionCount({
      address: account.address
    });
    console.log(\`Using nonce: \${nonce}\`);
    
    // Use gas settings from successful transaction
    const gasLimit = 13_000_000n;
    const baseGasPrice = parseGwei('0.01');
    
    // Send transaction
    console.log('Sending transaction...');
    const hash = await walletClient.sendTransaction({
      account,
      chain: grc20Testnet,
      to: to,
      data: data,
      gas: gasLimit,
      maxFeePerGas: baseGasPrice,
      maxPriorityFeePerGas: baseGasPrice,
      nonce,
      value: 0n
    });
    console.log(\`Transaction submitted with hash: \${hash}\`);
    
    // Wait for confirmation
    console.log('Waiting for confirmation...');
    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    console.log(\`Transaction confirmed in block \${receipt.blockNumber}\`);
    
    console.log('Property addresses added successfully!');
    
    // Clean up temporary files
    fs.unlinkSync('temp-property-addresses-ops.json');
  } catch (error) {
    console.error('Failed to add property addresses:', error);
    process.exit(1);
  }
}

addPropertyAddresses();
EOL

echo "Created publish script"

# Run the Node.js script
echo "Running publish script..."
node --experimental-modules publish-property-addresses.js

# Clean up
rm publish-property-addresses.js

echo "Done!"
